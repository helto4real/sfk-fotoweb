@using Foto.Web.Client.Shared;
@using Foto.Web.Client.ApiClients
@inject ImagesApiClient Client;

 <div class="container ">
    <div class="row justify-content-center mb-3">
        <div class="col col-8" style="max-width: 450px;" >
            <span class="text-center">Bilden ska rymmas inom 1920x1080. Större bilder kommer att automatiskt skalas ned att passa det formatet.</span>
        </div>
    </div>
    <div class="row g-3 mb-5 justify-content-center align-items-center">
        <div class="col col-8" style="max-width: 400px;">
            <CvEditForm id="uploadForm" EditContext="@_editContext" class="form" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="imagefile" class="form-label">Ladda upp dit foto</label>
                    @if (!_clearInputFileSelector)
                    {
                        <InputFile class="form-control" MaxFileSize="@Client.MaxAllowedImageSize" id="imagefile" OnChange="@HandleFileSelection" On @bind-Value="@_model.ImageName"/>
                    }
                    <ValidationMessage class="text-danger" For="@(() => _model.ImageFile)" />
                </div>
                <div class="mb-3">
                    <label for="title" class="form-label">Titel</label>
                    <InputText id="title" type="title" maxlength="18" class="form-control :invalid " @bind-Value="@_model.Title" />
                    <ValidationMessage class="text-danger" For="@(() => _model.Title)" />
                </div>
                <button type="submit" class="btn btn-primary" disabled="@(!_model.IsValid)">Ladda upp bild</button>
            </CvEditForm>
        </div>
    </div>
</div>

@if (_uploadedImages.Any())
{
    <ImageViewer Images="@_uploadedImages"/>
}

@code {
    
    private ImageUploadModel _model = new();
    private List<ImageItem> _uploadedImages = new();
    private EditContext? _editContext;
    
    protected override void OnInitialized()
    {
        _editContext = new(_model);
    }
    
    private async Task HandleValidSubmit()
    {
        var imageItem = await Client.UploadImage(_model.ImageFile, _model.Title);
        if (imageItem != null)
        {
            _uploadedImages.Add(imageItem);
            _model.ImageFile = null;
            _model.ImageName = string.Empty;
            _model.Title = string.Empty;
            ClearInputFile();
        }
    }
    
    private void HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        
        var filenameWithoutExtensions = Path.GetFileNameWithoutExtension(file.Name);

        _model.ImageName = file.Name;
        _model.ImageFile = e.File;
        _model.Title = filenameWithoutExtensions.Length > 18? filenameWithoutExtensions.Substring(0,18) : filenameWithoutExtensions;
        
        _editContext?.Validate();
    }
    
    private bool _clearInputFileSelector;
    /// <summary>
    ///     This is a hack to clear the input file selector.
    /// </summary>
    private void ClearInputFile()
    {
        _clearInputFileSelector = true;
        StateHasChanged();
        _clearInputFileSelector = false;
        StateHasChanged();
    }

    private class ImageUploadModel : IValidatableObject
    {
        public string ImageName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Titel är obligatoriskt.")]
        public string Title { get; set; } = string.Empty;

        public  IBrowserFile? ImageFile { get; set; }

        public bool IsValid => ImageFile is not null;

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (Path.GetExtension(ImageName) != ".jpg")
            {
                yield return new ValidationResult("Bilden måste vara en jpg bild.", new[] { nameof(ImageFile)});
            }
            if (ImageFile != null && ImageFile.Size > 1024 * 1024*100)
            {
                yield return new ValidationResult("Storleken får max vara 10MB.", new[] {nameof(ImageFile) });
            }
        }
    }
}