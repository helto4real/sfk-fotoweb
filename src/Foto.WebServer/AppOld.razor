@using Microsoft.AspNetCore.Components.Authorization
@namespace Foto.WebServer.Pages
<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
    <meta charset="utf-8"/>
    <meta http-equiv="Content-Security-Policy" content="block-all-mixed-content;upgrade-insecure-requests;default-src 'self';img-src data: 'self';script-src stackpath.bootstrapcdn.com 'sha256-34WLX60Tw3aG6hylk0plKbZZFXCuepeQ6Hu7OqRf8PI=' 'sha256-HU12q4hTLt0INlq0UBW6M5D5JYS2DLzQLA7sDXKLXmw=' 'self'; style-src stackpath.bootstrapcdn.com fonts.googleapis.com 'unsafe-inline' 'self'; font-src fonts.gstatic.com 'self';">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <base href="/"/>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins">
    
    @* Vendor css including the custom bootstrap css *@
    <link href="assets/css/custom.min.css" rel="stylesheet">
    <link rel="stylesheet" href="assets/vendor/bootstrap-icons/font/bootstrap-icons.css">

    @* Application css *@
    <link rel="stylesheet" href="assets/css/site.css">
    <HeadOutlet />
    @* <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered"/> *@
</head>
<body>

@if (isConnected)
{
    
<CascadingValue Value="ConsentGiven">
    <CascadingAuthenticationState>
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" >
                    <Authorizing>
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </Authorizing>
                    <NotAuthorized>
                        @if (context?.User?.Identity is not null && context.User.Identity.IsAuthenticated)
                        {
                            <div class="container d-flex flex-column justify-content-center align-items-center">
                                <div class="row row-cols-auto align-items-center">
                                    <p>Du saknar rättigheter att titta på denna sida.</p>
                                </div>
                            </div>
                        }
                    </NotAuthorized>
                </AuthorizeRouteView>
                <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingAuthenticationState>
</CascadingValue>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

<div id="blazor-error-ui">
    <environment include="Staging,Production">
        Ett fel har inträffat, prova att refresha sidan och logga in igen! Om felet uppstår kontakta administratören.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="" class="reload">Ladda om sidan!</a>
    <a class="dismiss">🗙</a>
</div>

<script src="_framework/blazor.server.js"></script>
<script src="assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
@* <script src="_content/BlazorStrap/popper.min.js"></script> *@
<script src="_content/BlazorStrap/blazorstrap.js"></script>
</body>
</html>

@code {

    [Parameter]
    public bool ConsentGiven { get; set; }

    [Parameter]
    public HttpRequest? HttpRequest { get; set; }
    
    private bool isConnected;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

}