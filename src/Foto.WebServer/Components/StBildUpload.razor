@using FluentValidation
@using Foto.WebServer.Dto
@using Foto.WebServer.Services
@using Severity = MudBlazor.Severity
@using System.Text.Json.Serialization
@inject AppSnackBar AppSnackBar
@inject IImageService ImageService
@inject NavigationManager NavigationManager

<!--suppress CssUnresolvedCustomProperty -->
<AppForm @bind-Disabled="@_showProgressBar" @ref="_form" Model="@_model" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
    <Form>
        <AppTextField @bind-Value="@_model.Title"
                      For="@(() => _model.Title)"
                      Label="Rubrik"
                      HelperText="Rubrikförslag, lämpligen tre, fyra ord"/>

        <AppTextField @bind-Value="@_model.Name"
                      For="@(() => _model.Name)"
                      Label="Fotograf"/>

        <AppTextField @bind-Value="@_model.Description"
                      For="@(() => _model.Description)"
                      Lines="3"
                      MaxLength="300"
                      HelperText="Beskriv kort din bild, max 300 tecken."
                      Label="Beskrivning av bilden"/>

        <AppTextField @bind-Value="@_model.AboutThePhotographer"
                      For="@(() => _model.AboutThePhotographer)"
                      Lines="3"
                      MaxLength="300"
                      HelperText="T.ex. ålder, bostadsort, favoritmotiv, kameramärke, favoritfotograf, hemsida"
                      Label="Om dig"/>

        <AppTextField @bind-Value="@_model.Location"
                      For="@(() => _model.Location)"
                      HelperText="T.ex. plats, närmaste stad"
                      Label="Vart bilden är tagen"/>

        <AppTextField @bind-Value="@_model.Time"
                      InputType="InputType.Date"
                      For="@(() => _model.Time)"
                      Label="När bilden tagen:"/>

        <MudPaper Elevation="0" Outlined="true" Class="border-solid mt-4" Style="border-color: var(--mud-palette-lines-inputs);">
            <div class="d-flex">
                <MudText Align="Align.Left" Class="flex-auto my-auto ml-2" Typo="Typo.body1">@_model.ImageName</MudText>
                <MudFileUpload Accept=".jpg, .jpeg" T="IBrowserFile" For="@(() => _model.ImageFile)" @bind-Files="_model.ImageFile">
                    <ButtonTemplate>
                        <AppButton HtmlTag="label"
                                   Color="Color.Primary"
                                   Class="my-3 mr-2"
                                   StartIcon="@Icons.Material.Filled.Image"
                                   for="@context">
                            Välj bild
                        </AppButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </div>
        </MudPaper>
    </Form>
    <Actions >
        <AppButton StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" Disabled="@(!IsValid)" Class="ml-auto mr-2" OnClick="@(async () => await HandleValidSubmit())">Spara</AppButton>
        <AppButton StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Surface" Disabled="@(_showProgressBar)" Class="mr-auto ml-2" OnClick="@(() => NavigationManager.NavigateTo("/"))">Avbryt</AppButton>
    </Actions>
</AppForm>

@if (_showProgressBar)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
}

@if (!string.IsNullOrEmpty(_alertMessage))
{
    <AppAlert Class="mt-3" Severity="Severity.Error">@_alertMessage</AppAlert>
}

@code {
    string? _alertMessage;
    private StBildUploadModel _model = new();
    private List<ImageItem> _uploadedImages = new();
    private bool _showProgressBar = false;
    private StBildUploadModelValidator _validator = new();
    private AppForm _form = default!;

    public bool IsValid => _model.ImageFile is not null && _form.IsValid && !_showProgressBar;

    private async Task HandleValidSubmit()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }

        try
        {
            _showProgressBar = true;
    // The time needs to be in UTC format. 
            _model.Time = _model.Time.ToUniversalTime();
            var (imageItem, error) = await ImageService.UploadImageWithMetadata(_model.ImageFile, _model.Title, _model, "st-bild");
            await Task.Delay(3000);
            if (imageItem != null)
            {
                _uploadedImages.Add(imageItem);
                _model = new StBildUploadModel();
                _alertMessage = null;
                AppSnackBar.Alert("Uppladdning av ST-bild lyckades!", Severity.Success);
            }
            else
            {
                if (error is not null && error.Detail.IndexOf("wrong size", StringComparison.InvariantCultureIgnoreCase) > 0)
                {
                    _alertMessage = "Den bild du laddade upp är inte exakt 2079x1382 pixlar. Ladda upp en ny bild.";
                }
                else
                {
                    _alertMessage = error?.Detail;
                }
            }
        }
        finally
        {
            _showProgressBar = false;
        }
    }

    public class StBildUploadModel
    {
        private string? _imageName;
        IBrowserFile? _imageFile;

        public string ImageName => _imageName ?? string.Empty;
        public long ImageSize { get; private set; }

        public string Title { get; set; } = default!;
        public string Name { get; set; } = default!;
        public string Location { get; set; } = default!;
        public DateTime Time { get; set; } = new(2023, 1, 1);
        public string Description { get; set; } = default!;
        public string AboutThePhotographer { get; set; } = default!;

        [JsonIgnore]
        public IBrowserFile? ImageFile
        {
            get => _imageFile;
            set
            {
                if (value is not null)
                {
                    _imageFile = value;
                    _imageName = value.Name;
                    ImageSize = value.Size;
                }
                else
                {
                    _imageFile = null;
                    _imageName = null;
                    ImageSize = 0;
                }
            }
        }
    }

    private static string[] _allowedExtensions = { ".jpg", ".jpeg" };

    public class StBildUploadModelValidator : ValidatorBase<StBildUploadModel>
    {
        public StBildUploadModelValidator()
        {
            RuleFor(x => x.ImageFile)
                .NotEmpty()
                .WithMessage("Välj bild.")
                .DependentRules(() =>
                {
                    RuleFor(x => x.ImageName)
                        .Must(x => _allowedExtensions.Contains(Path.GetExtension(x).ToLowerInvariant()))
                        .WithMessage("Bilden måste vara en jpg bild, (*.jpg eller *.jpeg)");

                    RuleFor(x => x.ImageSize)
                        .LessThanOrEqualTo(IImageService.MaxAllowedImageSize)
                        .WithMessage($"Bilden får inte vara större än {IImageService.MaxAllowedImageSize / 1024 / 1024}Mb.");
                });
            RuleFor(x => x.Description)
                .NotEmpty()
                .WithMessage("Beskrivning måste anges.")
                .MaximumLength(300)
                .WithMessage("Beskrivningen får max vara 300 tecken");
            RuleFor(x => x.Name)
                .NotEmpty()
                .WithMessage("Namn på fotograf måste anges.");
            RuleFor(x => x.Title)
                .NotEmpty()
                .WithMessage("Rubrik måste anges.");
            RuleFor(x => x.Location)
                .NotEmpty()
                .WithMessage("Plats måste anges.");
            RuleFor(x => x.AboutThePhotographer)
                .NotEmpty()
                .WithMessage("Om fotografen måste anges.");
            RuleFor(x => x.Time)
                .LessThanOrEqualTo(e => DateTime.Now.AddDays(1))
                .WithMessage("Tidpunkt kan inte vara framåt i tiden");
        }
    }

}