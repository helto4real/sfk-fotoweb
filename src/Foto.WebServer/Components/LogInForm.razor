@using FluentValidation
@using Foto.WebServer.Services
@using Foto.WebServer.Authentication
@using Foto.WebServer.Dto
@using Blazored.FluentValidation
@inject IAuthService AuthService
@inject ExternalProviders ExternalProviders
<div class="container ">
    <div class="row g-3 mb-1 justify-content-center align-items-center">
        <div class="col col-8">
            <h1 class="text-center">Logga in</h1>
            <p class="text-center">
                Logga in genom att ange ditt användarnamn och lösenord nedan eller använd ditt konto grån Google genom att
                trycka på knappen under rubriken "Logga in med ditt sociala konto:"
            </p>
        </div>
    </div>
    <div class="row g-3 mb-5 justify-content-center align-items-center">
        <div class="col col-8" style="max-width: 300px;">
            <CvEditForm Model="@_model" class="form-horizontal py-5" OnValidSubmit="@LoginOrCreate" >
                <FluentValidationValidator/>
                <div class="mb-3">
                    <label for="username" class="form-label">Användarnamn</label>
                    <InputText id="username" class="form-control" autocomplete="username" @bind-Value="_model.Username" autofocus/>
                    <ValidationMessage For="@(() => _model.Username)"/>
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Lösenord</label>
                    <InputText id="password" type="password" class="form-control" autocomplete="current-password" @bind-Value="_model.Password"/>
                    <ValidationMessage For="@(() => _model.Password)"/>
                </div>
                <div class="d-flex justify-content-start align-items-center">
                    <button type="submit" class="btn btn-primary" disabled="@_isSubmitting">
                        Login
                    </button>
                    <div class="spinner-border spinner-border-sm ms-1" role="status" aria-hidden="true" style="display: @(_isSubmitting ? "block" : "none");">
                        <span class="visually-hidden">Loggar in ..</span>
                    </div>
                </div>
            </CvEditForm>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col col-8" style="max-width: 300px;">
            <h6>Logga in med ditt sociala konto:</h6>
            <div class="row ">
                @foreach (var provider in ExternalProviders.SocialProviders.Value)
                {
                    <div class="col">
                        <a href="/api/auth/login/@provider">
                            <button type="button" @onclick="SocialLoginClickCallback"
                                    class="btn btn-danger btn-lg btn-block bg-secondary border-dark" disabled="@_isSubmitting">
                                <i
                                    class="@(GetClassFromProvider(@provider))"></i>
                            </button>
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (_responseHandler.HasAlert)
{
    <div class="alert alert-danger">@_responseHandler.Message</div>
}

@code {
    private readonly ResponseHandler _responseHandler = new();

    bool _isSubmitting = false;
    
    private LoginOrCreateUserModel _model = new();

    [Parameter]
    public EventCallback OnLoggedIn { get; set; }

    [Parameter]
    public EventCallback OnCreated { get; set; }

    private void SocialLoginClickCallback()
    {
        _isSubmitting = true;
        StateHasChanged();
    }

    async Task LoginOrCreate()
    {
        _isSubmitting = true;
        StateHasChanged();
        
    
        // It is impossible that Username or Password is null here, because the form is invalid if they are.
        var loginInfo = new LoginUserInfo { Username = _model.Username!, Password = _model.Password! };
        var (user, error) = await AuthService.LoginAsync(loginInfo);
        if (user is not null)
        {
            // var authStateProvider = (TokenAuthorizationProvider)AuthenticationStateProvider;
            // await authStateProvider.MarkUserAsAuthenticated(user);
            await OnLoggedIn.InvokeAsync(_model.Username);
        }
        else
        {
            _isSubmitting = false;
            if (error?.StatusCode == 403)
            {
                _responseHandler.Message = "Fel användarnamn eller lösenord.";
            }
            else
            {
                _responseHandler.CheckResponse((user, error));
            }
            StateHasChanged();
        }
    }

    string GetClassFromProvider(string provider)
    {
        return provider switch
        {
            "Google" => "bi bi-google",
            "Facebook" => "bi bi-facebook",
            "Twitter" => "bi bi-twitter",
            "Microsoft" => "bi bi-microsoft",
            _ => "bi bi-github"
            };
    }

    public class LoginOrCreateUserModel
    {
        public string? Username { get; set; }
        public string? Password { get; set; }
        public string? ConfirmPassword { get; set; }
        public string? Email { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public bool IsLogin { get; set; }
    }

    public class LoginOrCreateUserModelValidator : AbstractValidator<LoginOrCreateUserModel>
    {
        public LoginOrCreateUserModelValidator()
        {
            RuleFor(x => x.Username)
                .NotEmpty()
                .WithMessage("Användarnamn måste anges.")
                .MaximumLength(25)
                .WithMessage("Användarnamn får max vara 25 tecken")
                .MinimumLength(5)
                .WithMessage("Användarnamn måste vara minst 5 tecken");

            RuleFor(x => x.Password)
                .NotEmpty()
                .WithMessage("Lösenord måste anges.")
                .MaximumLength(32)
                .MinimumLength(6)
                .WithMessage("Lösenordet måste vara mellan 6 och 32 tecken.")
                .Matches("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z])(?=.*[^a-zA-Z\\d]).*$")
                .WithMessage("Lösenordet måste innehålla små och stora bokstäver, siffror samt specialtecken.");
        }
    }

}