@using Foto.WebServer.Dto
<AppImageCard
    Image="@($"/api/images/image/{StBild.ImageReference}?thumb")"
    FullImage="@($"/api/images/image/{StBild.ImageReference}")"
    MaxWidth="@MaxWidth"
    Height="@Height"
    Title="@StBild.Title"
    HideActions="@HideActions"
    Description="@StBild.Description">
    <Actions>
        @if (!HideActions)
        {
            <MudPaper Class="d-flex justify-space-between  flex-grow-1 " Elevation="0">
                <MudTooltip Placement="Placement.Bottom" Inline="true" Text="@EditOrViewToolTip">
                    <MudIconButton Href="@($"/st-bild/edit/{StBild.Id}")" Icon="@EditOrViewIcon" Color="Color.Primary"/>
                </MudTooltip>
                <MudTooltip Placement="Placement.Bottom" Inline="true" Text="@StatusToolTip">
                    <MudIconButton Class="disable-hover" DisableElevation="true" DisableRipple="true" Icon="@StatusIcon" Color="@StatusColor"/>
                </MudTooltip>
            </MudPaper>
        }
    </Actions>
</AppImageCard>

@code {

    [Parameter]
    public StBildInfo StBild { get; set; } = default!;

    [Parameter]
    public int MaxWidth { get; set; } = 230;

    [Parameter]
    public int Height { get; set; } = 153;

    [Parameter]
    public bool HideActions { get; set; }

    private bool CanEdit => GetStatus() is StImageStatus.Uploaded or StImageStatus.Rejected;

    private StImageStatus GetStatus()
    {
    // For now rejected is not available
        if (StBild.IsUsed) return StImageStatus.Sent;
        return StBild.IsAccepted ? StImageStatus.Approved : StImageStatus.Uploaded;
    }

    public string StatusIcon => GetStatus() switch
    {
        StImageStatus.Uploaded => Icons.Material.Filled.ImageSearch,
        StImageStatus.Approved => Icons.Material.Filled.Check,
        StImageStatus.Rejected => Icons.Material.Filled.FrontHand,
        StImageStatus.Sent => Icons.Material.Filled.Newspaper,
        _ => throw new ArgumentOutOfRangeException()
        };

    public Color StatusColor => GetStatus() switch
    {
        StImageStatus.Uploaded => Color.Inherit,
        StImageStatus.Approved => Color.Success,
        StImageStatus.Rejected => Color.Error,
        StImageStatus.Sent => Color.Success,
        _ => throw new ArgumentOutOfRangeException()
        };

    public string StatusToolTip => GetStatus() switch
    {
        StImageStatus.Uploaded => "Status: Under godkännande av ST-administratör",
        StImageStatus.Approved => "Status: Godkänd och inväntar att skickas till ST",
        StImageStatus.Rejected => "Status: Ej godkänd, ändringar krävs",
        StImageStatus.Sent => "Status: Skickad till ST",
        _ => throw new ArgumentOutOfRangeException()
        };

    public string EditOrViewIcon => CanEdit ? Icons.Material.Filled.Edit : Icons.Material.Filled.Visibility;
    public string EditOrViewToolTip => CanEdit ? "Redigera ST-bild" : "Visa ST-bild";

    public enum StImageStatus
    {
        Uploaded,
        Approved,
        Rejected,
        Sent
    }

}