@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using Foto.WebServer.Services
@layout MainLayout
@inherits AuthorizedBasePage
@inject IUserService UserService

<AppContent ContentMaxWidth="MaxWidth.Small">
    <Title>Välkommen till SFK fotowebb</Title>
    <Ingress>
        Detta är en webbplats för medlemmar i Sundsvalls fotoklubb. Denna tjänst är under utveckling och du kommer
        att kunna ladda upp bilder till tävlingar och till ST.
    </Ingress>

    <Container>
        @if (!_emailConfirmed)
        {
            <MudContainer>
                <AppAlert Severity="Severity.Warning">
                    <h5>Bekräfta din e-postadress!</h5>
                    <p >
                        Du har inte bekräftat din e-postadress (@_email). Klicka på länken i det e-postmeddelande du fick när du registrerade.
                        Det är viktigt att du konfirmerar din e-post adress så vi vet att vi har rätt kontaktuppgifter till dig. Kontakta
                        administratören om du inte fått något e-postmeddelande eller om din e-post inte är rätt.
                    </p>
                </AppAlert>
            </MudContainer>
        }
    </Container>
</AppContent>

@* @if (_responseHandler.HasAlert) *@
@* { *@
@*     <div class="alert alert-danger">@_responseHandler.Message</div> *@
@* } *@

@code {
    private bool _emailConfirmed = true;
    private string _email = default!;
    private readonly ResponseHandler _responseHandler = new();

    [Parameter]
    public string[] SocialProviders { get; set; } = Array.Empty<string>();

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var currentUser = await GetCurrentUserAsync();
            if (currentUser.Identity?.Name is not null)
            {
                var result = await UserService.GetCurrentUserAsync();
                var user = _responseHandler.CheckResponse(result);
                if (user is not null)
                {
                    _emailConfirmed = user.EmailConfirmed;
                    _email = user.Email;
                }
            }
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

}