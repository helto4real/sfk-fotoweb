@page "/register"
@using FluentValidation
@using Foto.WebServer.Authentication
@using Foto.WebServer.Services
@using Foto.WebServer.Dto
@using Blazored.FluentValidation
@inherits BasePage
@layout MainLayout
@inject ExternalProviders ExternalProviders
@inject IAuthService AuthService

<div class="row g-3 mb-1 justify-content-center align-items-center">
    <div class="col col-8">
        <h2 class="text-center">Registrera dig</h2>
        <p class="text-center">
            Registrera dig genom att ange din e-post och nytt lösen. Administratören måste ha registrerat din e-post för att
            du skall kunna registrera dig som användare. Om din e-post är anknyten till ett google konto kan du registrera dig genom att trycka på
            google knappen nedan. Då behöver du bara ange Google kontot när du loggar in i framtiden. Vill du byta din e-post till ditt Google konto,
            kontakta administratören.".
        </p>
    </div>
</div>
<div class="row g-3 mb-1 justify-content-center align-items-center">
    <div class="col col-8" style="max-width: 300px;">
        <CvEditForm Model="@_model" class="form-horizontal py-5" OnValidSubmit="@CreateUser">
            <FluentValidationValidator/>
            <div class="mb-3">
                <label for="username" class="form-label">Användarnamn</label>
                <InputText id="username" class="form-control" autocomplete="username" @bind-Value="_model.UserName" autofocus/>
                <ValidationMessage For="@(() => _model.UserName)"/>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Lösenord</label>
                <InputText id="password" type="password" class="form-control" autocomplete="new-password" @bind-Value="_model.Password"/>
                <ValidationMessage For="@(() => _model.Password)"/>
            </div>
            <div class="mb-3">
                <label for="confirmPassword">Bekräfta lösenord</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="_model.ConfirmPassword"/>
                <ValidationMessage For="@(() => _model.ConfirmPassword)"/>
            </div>
            <div class="mb-3">
                <label for="firstname" class="form-label">Förnamn</label>
                <InputText id="firstname" class="form-control" autocomplete="given-name" @bind-Value="_model.FirstName"/>
                <ValidationMessage For="@(() => _model.FirstName)"/>
            </div>
            <div class="mb-3">
                <label for="lastname" class="form-label">Efternamn</label>
                <InputText id="lastname" class="form-control" autocomplete="family-name" @bind-Value="_model.LastName"/>
                <ValidationMessage For="@(() => _model.LastName)"/>
            </div>
            <div class="d-flex justify-content-start align-items-center">
                <button type="submit" class="btn btn-primary" disabled="@_isSubmitting">
                    Skapa användare
                </button>
                <div class="spinner-border spinner-border-sm ms-1" role="status" aria-hidden="true" style="display: @(_isSubmitting ? "block" : "none");">
                    <span class="visually-hidden">Skapar användare ..</span>
                </div>
            </div>
        </CvEditForm>

        <h6>Skapa konto med ditt sociala konto:</h6>
        @foreach (var provider in ExternalProviders.SocialProviders.Value)
        {
            <div class="col">
                <a href="/api/auth/login/@provider?token=@EscapedToken">
                    <button type="button" @onclick="SocialLoginClickCallback"
                            class="btn btn-danger btn-lg btn-block bg-secondary border-dark ">
                        <i
                            class="@(GetClassFromProvider(provider))" disabled="@_isSubmitting">
                        </i>
                    </button>
                </a>
            </div>
        }
    </div>
</div>

@if (_responseHandler.HasAlert)
{
    <div class="alert alert-danger">@_responseHandler.Message</div>
}

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string Token { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery(Name = "success")]
    public string? Success { get; set; } = string.Empty;
    
    public bool IsFail => !string.IsNullOrEmpty(Success);

    public bool HasToken => !string.IsNullOrEmpty(Token);
    public string EscapedToken => string.IsNullOrEmpty(Token) ? string.Empty : Uri.EscapeDataString(Token);

    private readonly ResponseHandler _responseHandler = new();

    private readonly RegisterModel _model = new();
    bool _isSubmitting;

    protected override void OnInitialized()
    {
        if (IsFail)
        {
            _responseHandler.Message = "Tyvärr så verkar inte ditt Googlekonto vara registrerat i systemet. Kontakta administratören för att få hjälp.";
        }
        base.OnInitialized();
    }

    private void SocialLoginClickCallback()
    {
        _isSubmitting = true;
        StateHasChanged();
    }

    string GetClassFromProvider(string provider)
    {
        return provider switch
        {
            "Google" => "bi bi-google",
            "Facebook" => "bi bi-facebook",
            "Twitter" => "bi bi-twitter",
            "Microsoft" => "bi bi-microsoft",
            _ => "bi bi-github"
            };
    }

    async Task CreateUser()
    {
        _isSubmitting = true;
        StateHasChanged();

        if (HasToken)
        {
            var unEscapedToken = Uri.UnescapeDataString(Token);
            var (registeredUser, errorRegisteredUser) = await AuthService.RegisterUserAsync(new NewUserInfo
            {
                FirstName = _model.FirstName!,
                LastName = _model.LastName!,
                Email = _model.UserName!,
                UserName = _model.UserName!,
                Password = _model.Password!,
                UrlToken = unEscapedToken
            });
            if (registeredUser is not null)
            {
                NavigationManager?.NavigateTo("/login", true);
            }
            else
            {
                _isSubmitting = false;
                if (errorRegisteredUser!.Detail.Contains("not pre-registered"))
                {
                    _responseHandler.Message = "Tyvärr så verkar inte din epostadress vara registrerat i systemet. Kontakta administratören för att få hjälp.";
                }
                else
                {
                    _responseHandler.CheckResponse((registeredUser, errorRegisteredUser));
                }
                StateHasChanged();
            }
        }
    }

    public record RegisterModel
    {
        public string? UserName { get; set; } = string.Empty;
        public string? Password { get; set; } = string.Empty;
        public string? ConfirmPassword { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
    }

    public class RegisterModelValidator : AbstractValidator<RegisterModel>
    {
        public RegisterModelValidator()
        {
            RuleFor(x => x.UserName)
                .NotEmpty()
                .EmailAddress()
                .WithMessage("Du måste ange en användare med en giltig e-postadress.");
            RuleFor(x => x.Password)
                .NotEmpty()
                .WithMessage("Lösenord måste anges.")
                .MaximumLength(32)
                .MinimumLength(6)
                .WithMessage("Lösenordet måste vara mellan 6 och 32 tecken.")
                .Matches("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z])(?=.*[^a-zA-Z\\d]).*$")
                .WithMessage("Lösenordet måste innehålla små och stora bokstäver, siffror samt specialtecken.");
            RuleFor(x => x.ConfirmPassword)
                .NotEmpty()
                .WithMessage("Du måste ange lösenordet två gånger.")
                .Equal(x => x.Password)
                .WithMessage("Lösenorden måste vara lika.");
            RuleFor(x => x.FirstName)
                .NotEmpty()
                .WithMessage("Förnamn måste anges.");
            RuleFor(x => x.LastName)
                .NotEmpty()
                .WithMessage("Efternamn måste anges.");
        }
    }

}