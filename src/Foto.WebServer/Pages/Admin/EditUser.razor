@page "/admin/users/edit/{userName}"
@layout MainLayout
@using Foto.WebServer.Dto
@using Foto.WebServer.Services
@using Microsoft.AspNetCore.Authorization
@inherits AuthorizedBasePage
@attribute [Authorize(Roles = "Admin")]
@inject IUserService UserService
@inject IAdminService AdminService
@inject IJSRuntime JsRuntime

<div class="container d-flex flex-column justify-content-center align-items-center">
    <div class="row row-cols-auto align-items-center">
        <h2>Redigera användare</h2>
    </div>
</div>

@if (User is not null)
{
    <div class="container">
        <div class="row g-3 mb-5 justify-content-center align-items-center">
            <div class="col col-8" style="max-width: 350px;">
                <EditForm Model="@User" OnValidSubmit="@HandleValidSubmit" Context="authirzationContext">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <div class="form-group mt-1">
                        <label for="username">Username:</label>
                        <InputText id="username" class="form-control" @bind-Value="@User.Username"/>
                        <ValidationMessage For="@(() => User.Username)"/>
                    </div>
                    <div class="form-group mt-1">
                        <label>Roller:</label>
                        @if (_roles is not null)
                        {
                            @foreach (var role in _roles)
                            {
                                <div>
                                    @if(User.Roles.Any(r => r == role.Name))
                                    {
                                        <input class="form-check-input" type="checkbox" id="@role.Name" checked @onchange="eventArgs => {OnRoleSelectChangedAsync(role.Name, eventArgs);}"/> 
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="checkbox" id="@role.Name" unchecked @onchange="eventArgs => {OnRoleSelectChangedAsync(role.Name, eventArgs);}"/> 
                                    }
                                    <label style="margin-left: 8px">@RoleNameTranslator.GetRoleName(role.Name)</label>
                                </div>
                            }
                        }
                    </div>
                    <div class="d-flex justify-content-between align-items-center mt-1">
                        <button type="submit" class="btn btn-primary app-button">Spara</button>
                        <button type="button" class="btn btn-secondary app-button" @onclick="OnCancel">Avbryt</button>
                        <button type="button" class="btn btn-danger app-button" @onclick="OnDeleteUser">Ta bort</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-danger">@(_responseHandler.Message)</div>
}

@code
{
    [Parameter]
    public string UserName { get; set; } = string.Empty;
    private UserInfo? User { get; set; } = new();
    private IReadOnlyCollection<RoleInfo>? _roles;
    private readonly ResponseHandler _responseHandler = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var rolesTask = AdminService.GetRolesAsync();
            var userTask = UserService.GetUserByUsernameAsync(UserName);
            await Task.WhenAll(userTask, rolesTask);
            User = userTask.Result;
            _roles = _responseHandler.CheckResponse(rolesTask.Result);

            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandleValidSubmit()
    {
        if (User == null)
        {
    //Todo: show error
            return;
        }
    // Save the newUser changes here

        if (!await UserService.UpdateUserAsync(User))
        {
    // Todo: show error
            return;
        }

        // Navigate back to the newUser list page
        NavigationManager?.NavigateTo("/admin/users/list");
    }

    private async Task OnDeleteUser()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Är du säker på att du vill ta bort användaren {UserName}? Detta kommar ta bort all information och bilder om användaren!");
        if (confirmed)
        {
            await UserService.DeleteUserAsync(UserName);
            // Navigate back to the newUser list page
            NavigationManager?.NavigateTo("/admin/users/list");
        }
    }

    private void OnCancel()
    {
        NavigationManager!.NavigateTo("/admin/users/list");
    }
    
    private void OnRoleSelectChangedAsync(string role, ChangeEventArgs arg)
    {
        if (arg.Value is not bool value) return;
        
        User?.Roles.RemoveAll(r => r == role);
        if (value)
        {
            User?.Roles.Add(role);
        }
    }

}