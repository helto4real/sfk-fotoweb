@page "/admin/users/edit/{userName}"
@layout MainLayout
@using Foto.WebServer.Dto
@using Foto.WebServer.Services
@using Microsoft.AspNetCore.Components.Authorization
@inherits AuthorizedBasePage
@inject IAdminService AdminService
@inject IJSRuntime JsRuntime

<h3>Edit User</h3>
<AuthorizeView Roles="Admin">
    <Authorizing>
        <div class="container">
            <div class="row g-3 mb-5 justify-content-center align-items-center">
                <div class="col col-8" style="max-width: 300px;">
                    <p>Loggar in användare</p>
                </div>
            </div>
        </div>
    </Authorizing>
    <Authorized>
        @if (User is not null)
        {
            <div class="container">
                <div class="row g-3 mb-5 justify-content-center align-items-center">
                    <div class="col col-8" style="max-width: 300px;">
                        <EditForm Model="@User" OnValidSubmit="@HandleValidSubmit" Context="authirzationContext">
                            <DataAnnotationsValidator/>
                            <ValidationSummary/>

                            <div class="form-group mt-1">
                                <label for="username">Username:</label>
                                <InputText id="username" class="form-control" @bind-Value="@User.Username"/>
                                <ValidationMessage For="@(() => User.Username)"/>
                            </div>
                            <div class="form-group mt-1">
                                <label for="isadmin">Is admin:</label>
                                <InputCheckbox id="isadmin" class="form-check-input" @bind-Value="@User.IsAdmin"/>
                            </div>
                            <div class="d-flex justify-content-between align-items-center mt-1">
                                <button type="submit" class="btn btn-primary">Spara</button>
                                <button type="button" class="btn btn-secondary" @onclick="OnDelete">Ta bort</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-danger">"Något gick fel, prova att logga in igen!"</div>
        }
    </Authorized>
</AuthorizeView>

@code
{
    [Parameter]
    public string UserName { get; set; } = string.Empty;
    private UserInfo? User { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        User = await LoadUser(UserName);
        StateHasChanged();
        await base.OnInitializedAsync();
    }

    private async Task<UserInfo?> LoadUser(string username)
    {
        return await AdminService.GetUserByUsernameAsync(username);
    }

    private async Task HandleValidSubmit()
    {
        if (User == null)
        {
    //Todo: show error
            return;
        }
    // Save the newUser changes here

        if (!await AdminService.UpdateUserAsync(User))
        {
    // Todo: show error
            return;
        }

    // Navigate back to the newUser list page
        NavigationManager?.NavigateTo("/admin/users/list");
    }

    private async Task OnDelete()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Är du säker på att du vill ta bort användaren {UserName}?");
        if (confirmed)
        {
            await AdminService.DeleteUserAsync(UserName);
    // Navigate back to the newUser list page
            NavigationManager?.NavigateTo("/admin/users/list");
        }
    }

}