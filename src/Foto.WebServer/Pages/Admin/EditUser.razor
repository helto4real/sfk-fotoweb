@page "/admin/users/edit/{userName}"
@layout MainLayout
@using Foto.WebServer.Dto
@using Foto.WebServer.Services
@using Microsoft.AspNetCore.Authorization

@inherits AuthorizedBasePage
@attribute [Authorize(Roles = "Admin")]
@inject IUserService UserService
@inject IAdminService AdminService
@inject IJSRuntime JsRuntime

<PageTitle>Redigera användare</PageTitle>
<AppContent ContentMaxWidth="MaxWidth.Small">
    <Title>Redigera användare</Title>
    <Ingress>Redigera användarinformation. Medlemsinformation hanteras under menyn "Medlemmar"</Ingress>
    <Container>
        <AppForm @bind-Disabled="@_disabled" @ref="_form" Model="User" >
            <Form>
                <AppTextField @bind-Value="@User.Username"
                              For="@(() => User.Username)"
                              Label="Förnamn"/>
                <MudText Typo="Typo.h6">Roller</MudText>
                    @foreach (var role in _roles)
                    {
                            <MudCheckBox T="bool"  Checked="@(User.Roles.Any(r => r == role.Name))"
                                         CheckedChanged="b => OnRoleSelectChangedAsync(role.Name, b)" Label="@(RoleNameTranslator.GetRoleName(role.Name))"/>
                    }
            </Form>
            <Actions>
                <AppButton StartIcon="@Icons.Material.Filled.Save" OnClick="HandleValidSubmit" 
                           Color="Color.Primary">Spara</AppButton>
                <AppButton StartIcon="@Icons.Material.Filled.Cancel" OnClick="OnCancel" 
                           Color="Color.Surface">Spara</AppButton>
                <AppButton StartIcon="@Icons.Material.Filled.Delete" OnClick="OnDeleteUser" Color="Color.Error" 
                           Class="mr-auto">Radera</AppButton>
            </Actions>
        </AppForm>
    </Container>
</AppContent>

@if (_responseHandler.HasAlert)
{
    <AppAlert Severity="Severity.Error">@_responseHandler.Message</AppAlert>
}

@code
{
    [Parameter]
    public string UserName { get; set; } = string.Empty;

    private AppForm? _form;
    private UserInfo User { get; set; } = new();
    private IReadOnlyCollection<RoleInfo> _roles = new List<RoleInfo>();
    private readonly ResponseHandler _responseHandler = new();
    private bool _disabled;
    
    
    // public bool IsValid() => _validator.Validate(_member).IsValid;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var rolesTask = AdminService.GetRolesAsync();
            var userTask = UserService.GetUserByUsernameAsync(UserName);
            await Task.WhenAll(userTask, rolesTask);
            var user = _responseHandler.CheckResponse(userTask.Result);

            if (user is not null)
            {
                User = user;
            }
            _roles = _responseHandler.CheckResponse(rolesTask.Result) ?? _roles;

            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandleValidSubmit()
    {
        var result = await UserService.UpdateUserAsync(User);
        if (!_responseHandler.CheckResponse(result))
            return;

        // Navigate back to the newUser list page
        NavigationManager?.NavigateTo("/admin/users/list");
    }

    private async Task OnDeleteUser()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Är du säker på att du vill ta bort användaren {UserName}? Detta kommer ta bort all information och bilder om användaren!");
        if (confirmed)
        {
            var result = await UserService.DeleteUserAsync(UserName);
            if (!_responseHandler.CheckResponse(result))
                return;
            // Navigate back to the newUser list page
            NavigationManager?.NavigateTo("/admin/users/list");
        }
    }

    private void OnCancel()
    {
        NavigationManager!.NavigateTo("/admin/users/list");
    }

    private void OnRoleSelectChangedAsync(string role, bool? isChecked)
    {
        User.Roles.RemoveAll(r => r == role);
        if (isChecked ?? false)
        {
            User.Roles.Add(role);
        }
    }

}