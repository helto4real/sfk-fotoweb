@page "/admin/members/register/{memberId:guid}"
@page "/admin/members/register"

@layout MainLayout
@using Foto.WebServer.Services
@using Foto.WebServer.Dto
@using Microsoft.AspNetCore.Authorization
@inherits AuthorizedBasePage
@inject IMemberService MemberService;
@inject IAdminService AdminService;
@inject AppSnackBar AppSnackBar;

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Registrera medlem</PageTitle>

<AppContent ContentMaxWidth="MaxWidth.Small" ContentClass="d-flex flex-column justify-content-center align-items-center mt-5">
    <Title>Registrera medlem</Title>
    <Ingress>Registrera ny medlem</Ingress>
    <Container>
        <AppForm @bind-Disabled="@Disabled" @ref="_form" Model="_member" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
            <Form>
                <AppTextField @bind-Value="@_member.FirstName"
                              For="@(() => _member.FirstName)"
                              Label="Förnamn"/>
                <AppTextField @bind-Value="@_member.LastName"
                              For="@(() => _member.LastName)"
                              Label="Efternamn"/>
                <AppTextField @bind-Value="@_member.Email"
                              For="@(() => _member.Email)"
                              Label="E-post"/>
                <AppTextField @bind-Value="@_member.PhoneNumber"
                              For="@(() => _member.PhoneNumber)"
                              Label="Telefonnummer"/>
                <AppTextField @bind-Value="@_member.Address"
                              For="@(() => _member.Address)"
                              Label="Adress"/>
                <AppTextField @bind-Value="@_member.ZipCode"
                              For="@(() => _member.ZipCode)"
                              Label="Postkod"/>
                <AppTextField @bind-Value="@_member.City"
                              For="@(() => _member.City)"
                              Label="Postort"/>
                <MudText Typo="Typo.h6">Roller</MudText>
                    @foreach (var role in _roles)
                    {
                            <MudCheckBox T="bool"  Checked="@(_member.Roles.Any(r => r.Name == role.Name))"
                                         CheckedChanged="b => OnRoleSelectChangedAsync(role.Name, b)" Label="@(RoleNameTranslator.GetRoleName(role.Name))"/>
                    }
            </Form>
            <Actions>
                <MudButton StartIcon="@Icons.Material.Filled.Save" OnClick="HandleValidSubmit" Variant="Variant.Text" Color="Color.Primary" 
                           Disabled="@(!IsValid())" Class="mr-auto">@RegisterSaveButtonName</MudButton>
            </Actions>
        </AppForm>
    </Container>
</AppContent>

@if (_responseHandler.HasAlert)
{
    <AppAlert Severity="Severity.Error">@_responseHandler.Message</AppAlert>
}

@code {

    [Parameter]
    public Guid MemberId { get; set; }

    private MemberInfo _member = new();
    private List<RoleInfo> _roles = new();
    
    private readonly MemberInfoValidator _validator = new();
    private readonly ResponseHandler _responseHandler = new();
    
    private AppForm? _form;

    private bool Disabled { get; set; }

    private string RegisterSaveButtonName => MemberId == Guid.Empty ? "Registrera" : "Spara";
    public bool IsValid()
    {
        return _validator.Validate(_member).IsValid;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (MemberId != Guid.Empty && _member.Id == Guid.Empty)
            {
                var memberTask = MemberService.GetMemberByIdAsync(MemberId);
                var rolesTask = AdminService.GetRolesAsync();
                await Task.WhenAll(memberTask, rolesTask);
                var result = memberTask.Result;
                _member = _responseHandler.CheckResponse(result) ?? _member;
                var rolesResult = rolesTask.Result;
                _roles = _responseHandler.CheckResponse(rolesResult)?.ToList() ?? _roles;
            }
            else
            {
                var rolesResult = await AdminService.GetRolesAsync();
                _roles = _responseHandler.CheckResponse(rolesResult)?.ToList() ?? _roles;
                // Add default role
                _member.Roles.Add(new RoleInfo { Name = "Member" });
            }
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            Disabled = true;
            if (MemberId == Guid.Empty)
            {
                var result = await MemberService.CreateMemberAsync(
                    new NewMemberInfo(
                        _member.Email,
                        _member.PhoneNumber?.Trim(),
                        _member.FirstName.Trim(),
                        _member.LastName.Trim(),
                        _member.Address?.Trim(),
                        _member.ZipCode?.Trim(),
                        _member.City?.Trim(),
                        _member.Roles
                        )
                    );
                
                var member = _responseHandler.CheckResponse(result);
                if (member is not null)
                {
                    MemberId = _member.Id;
                    AppSnackBar.Alert("Medlem skapad", Severity.Success);
                }
            }
            else
            {
                var result = await MemberService.UpdateMemberAsync(
                    new UpdateMemberInfo(
                        _member.Id,
                        _member.Email.Trim(),
                        _member.PhoneNumber?.Trim(),
                        _member.FirstName.Trim(),
                        _member.LastName.Trim(),
                        _member.Address?.Trim(),
                        _member.ZipCode?.Trim(),
                        _member.City?.Trim(),
                        _member.Roles
                        )
                    );
                var member = _responseHandler.CheckResponse(result);
                if (member is not null)
                {
                    MemberId = _member.Id;
                    AppSnackBar.Alert("Medlem uppdaterad", Severity.Success);
                }
            }
            NavigationManager?.NavigateTo("/admin/members/manage");
        }
        finally
        {
            Disabled = false;
        }
    }

    private async Task OnDeactivateAsync()
    {
        try
        {
            Disabled = true;
            var result = await MemberService.DeactivateMemberByIdAsync(_member.Id);
            if (_responseHandler.CheckResponse(result))
            {
                _member.IsActive = false;
            }
        }
        finally
        {
            Disabled = false;
        }

        StateHasChanged();
    }

    private async Task OnActivateAsync()
    {
        try
        {
            Disabled = true;
            var result = await MemberService.ActivateMemberByIdAsync(_member.Id);
            if (_responseHandler.CheckResponse(result))
            {
                _member.IsActive = true;
            }
        }
        finally
        {
            Disabled = false;
        }
        StateHasChanged();
    }

    // private async Task OnDeleteUserAsync()
    // {
    //     var result = await MemberService.DeleteMemberByIdAsync(_member.Id);
    //     if (_responseHandler.CheckResponse(result))
    //     {
    //         NavigationManager?.NavigateTo("/admin/members/manage");            
    //     }
    // }

    private void OnRoleSelectChangedAsync(string role, bool? state)
    {
        _member.Roles.RemoveAll(r => r.Name == role);
        if (state ?? false)
        {
            _member.Roles.Add(new RoleInfo { Name = role });
        }
    }

}