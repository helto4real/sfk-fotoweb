@page "/admin/tokens"

@layout MainLayout
@using Foto.WebServer.Services
@using Foto.WebServer.Dto
@using Microsoft.AspNetCore.Authorization
@inherits AuthorizedBasePage
@attribute [Authorize(Roles = "Admin")]
@inject IAdminService AdminService

<PageTitle>Hantera tokens</PageTitle>

<AppContent ContentMaxWidth="MaxWidth.Medium" ContentClass="d-flex flex-column justify-content-center align-items-center mt-5">
    <Title>Hantera tokens</Title>
    <Ingress>Administration av tokens</Ingress>
    <Container>
        <MudTable Class="mb-3" Hover="true" Items="@_tokens">
            <HeaderContent>
                <MudTh>Token</MudTh>
                <MudTh>Typ</MudTh>
                <MudTh>Upphör</MudTh>
                <MudTh>Åtgärd</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Namn">
                    <MudText>@(Uri.EscapeDataString(context.Token))</MudText>
                </MudTd>                
                <MudTd DataLabel="Namn">
                    <MudText>@TranslateUrlToken(context.UrlTokenType)</MudText>
                </MudTd>
                <MudTd DataLabel="Namn">
                    <MudText>@context.ExpirationDate.ToLocalTime()</MudText>
                </MudTd>
                <MudTd DataLabel="Namn">
                    <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteToken(context.Id)">Radera</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
        <AppForm>
            <Form>
                <MudSelect T="string">
                    <MudSelectItem Value="@("AllowAddUser")" >Ny användare</MudSelectItem>
                    <MudSelectItem Value="@("AllowAddImage")"> Bilduppladdning</MudSelectItem>
                </MudSelect>
            </Form>
            <Actions>
                <AppButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddToken">Skapa token</AppButton>
            </Actions>
        </AppForm>
    </Container>
</AppContent>

@code {
    private List<UrlToken> _tokens = new();

    private string NewTokenTokenType { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnInitializedAsync();
            var currentTokens = await AdminService.GetCurrentTokens();
            _tokens.AddRange(currentTokens);
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task DeleteToken(Guid tokenId)
    {
        await AdminService.DeleteToken(tokenId);
        _tokens = (await AdminService.GetCurrentTokens()).ToList();
        StateHasChanged();
    }

    private static string TranslateUrlToken(UrlTokenType urlTokenUrlTokenType)
    {
        return urlTokenUrlTokenType switch
        {
            UrlTokenType.ConfirmEmail => "E-post bekräftelse",
            UrlTokenType.ResetPassword => "Återställ lösenord",
            UrlTokenType.AllowAddImage => "Bilduppladdning",
            UrlTokenType.AllowAddUser => "Ny användare",
            _ => "Okänd"
            };
    }

    async Task AddToken()
    {
        var tokenType = NewTokenTokenType switch
        {
            "AllowAddUser" => UrlTokenType.AllowAddUser,
            "AllowAddImage" => UrlTokenType.AllowAddImage,
            _ => UrlTokenType.AllowAddUser};

        var newToken = await AdminService.AddTokenByTokenType(tokenType);
        if (newToken is not null)
            _tokens.Add(newToken);
    }

}