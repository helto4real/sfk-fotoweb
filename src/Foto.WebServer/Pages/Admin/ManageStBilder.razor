@page "/admin/st-bild/hantera"
@using Foto.WebServer.Dto
@using Foto.WebServer.Services
@using Microsoft.AspNetCore.Authorization
@inherits AuthorizedBasePage
@attribute [Authorize(Policy = "StBildAdministratiorPolicy")]
@inject IStBildService StBildService

<PageTitle>Hantera ST-bilder</PageTitle>

<AppContent ContentMaxWidth="MaxWidth.Small" ContentClass="d-flex flex-column justify-content-center align-items-center mt-5">
    <Title>Hantera ST-bilder</Title>
    <Ingress>Hanterar ST-bilder</Ingress>
    <Container>
        @if (_stBilder.Any())
        {
            <MudTable Hover="true" Items="@_stBilder">
                <HeaderContent>
                    <MudTh>Bild</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Redigera</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Bild">
                        <MudImage Src="@($"/api/images/image/{context.ImageReference}?thumb")"/>
                    </MudTd>
                    <MudTd DataLabel="Status">
                        <MudTooltip Placement="Placement.Bottom" Inline="true" Text="@GetTooltipForStatus(context)">
                            <MudIconButton Class="disable-hover" DisableElevation="true" DisableRipple="true" Icon="@GetIconForStatus(context)" Color="@GetColorForStatus(context)"/>
                        </MudTooltip>
                    </MudTd>
                    <MudTd DataLabel="Redigera">
                        <MudLink Href="@($"/admin/st-bild/edit/{context.Id}?isFromAcceptList=false")">Redigera</MudLink>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <AppAlert Severity="Severity.Info">
                Det finns inga ST-bilder att hantera!
            </AppAlert>
            <MudButton Class="align-self-center mt-4" Style="width: 300px" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnShowPackagedImages">Visa skickade bilder</MudButton>
        }
    </Container>
</AppContent>

@* *@
@* @if (_stBilder is not null) *@
@* { *@
@*     <div class="container mt-3"> *@
@*         <div class="row g-3 mb-5 justify-content-center align-items-center"> *@
@*             @if (_stBilder.Any()) *@
@*             { *@
@*                 <div class="col col-8" style="max-width: 350px;"> *@
@*                     <div class="form-group"> *@
@*                         <label>Visa skickade bilder:</label> *@
@*                         <input type="checkbox" class="form-check-input mb-2" @onchange="OnShowPackagedImagesClicked"/> *@
@*                     </div> *@
@*                     <table class="table table-striped table-bordered table-hover"> *@
@*                         <thead> *@
@*                         <tr> *@
@*                             <th scope="col">Bild</th> *@
@*                             <th scope="col">Godkänd</th> *@
@*                             <th scope="col" class="text-center"></th> *@
@*                         </tr> *@
@*                         </thead> *@
@*                         <tbody> *@
@*                         @foreach (var stBild in _stBilder) *@
@*                         { *@
@*                             <tr > *@
@*                                 <td><img class="img-thumbnail" src="/api/images/image/@stBild.ImageReference?thumb" style="max-width: 8.2em; max-height: 8.2em; object-fit:scale-down;" alt="@stBild.Title" data-bs-toggle="modal" data-bs-target="#@stBild.ImageReference"></td> *@
@*                                 <td class="text-center"><InputCheckbox @bind-Value="@stBild.IsAccepted" disabled="true"/></td> *@
@*                                 <td><NavLink class="nav-link" href="@GetEditLink(stBild.Id)"><span>Visa</span></NavLink></td> *@
@*                             </tr> *@
@*                         } *@
@*                         </tbody> *@
@*                     </table> *@
@*                 </div> *@
@*                 @foreach (var stBild in _stBilder) *@
@*                 { *@
@*                     <div class="modal fade" id="@stBild.ImageReference" tabindex="-1" aria-labelledby="@(stBild.Title)" aria-hidden="true"> *@
@*                         <div class="modal-dialog modal-dialog-centered modal-fullscreen" data-bs-toggle="modal" data-bs-target="#@stBild.ImageReference"> *@
@*                             <div class="modal-content"> *@
@*                                 <div class="modal-body d-flex p-5"> *@
@*                                     <img src="/api/images/image/@stBild.ImageReference" class="img-fluid m-auto mw-100 mh-100" alt="@stBild.Title" style="max-width: 100%; max-height: 100%;"> *@
@*                                 </div> *@
@*                             </div> *@
@*                         </div> *@
@*                     </div> *@
@*                 } *@
@*             } *@
@*             else *@
@*             { *@
@*                 <div class="container d-flex flex-column justify-content-center align-items-center"> *@
@*                     <div class="row row-cols-auto align-items-center"> *@
@*                         <p>Alla bilder är redan skickade. Om du ändå vill titta på skickade bilder, tryck på knappen nedan.</p> *@
@*                     </div> *@
@*                     <div class="form-group"> *@
@*                             <button type="submit" class="btn btn-primary" @onclick="OnShowPackagedImages"> *@
@*                                 Visa skickade bilder *@
@*                             </button> *@
@*                     </div> *@
@*                 </div> *@
@*             } *@
@*         </div> *@
@*     </div> *@
@* } *@
@* else *@
@* { *@
@*     <div class="container d-flex flex-column justify-content-center align-items-center"> *@
@*         <div class="row row-cols-auto align-items-center"> *@
@*             Sidan laddar... *@
@*         </div> *@
@*     </div> *@
@* } *@

@code {
    private List<StBildInfo> _stBilder = new();
    private bool UsePackagedImages { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PopulateStBilderList();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task PopulateStBilderList()
    {
        _stBilder = await StBildService.GetStBilder(UsePackagedImages);
        StateHasChanged();
    }

    private Task ShowPackagedImages()
    {
        UsePackagedImages = true;
        return PopulateStBilderList();
    }

    private Task OnShowPackagedImagesClicked(ChangeEventArgs e)
    {
        UsePackagedImages = Convert.ToBoolean(e.Value);
        return PopulateStBilderList();
    }

    private Task OnShowPackagedImages()
    {
        UsePackagedImages = true;
        return PopulateStBilderList();
    }

    private string GetEditLink(Guid imageId)
    {
        return $"/admin/st-bild/edit/{imageId}";
    }

    public string GetIconForStatus(StBildInfo stBildInfo)
    {
        return stBildInfo.IsAccepted ? Icons.Material.Filled.Check : Icons.Material.Filled.ImageSearch;
    }

    public Color GetColorForStatus(StBildInfo stBildInfo)
    {
        return stBildInfo.IsAccepted ? Color.Success : Color.Inherit;
    }

    public string GetTooltipForStatus(StBildInfo stBildInfo)
    {
        return stBildInfo.IsAccepted ? "Godkänd" : "Skall granskas";
    }


}