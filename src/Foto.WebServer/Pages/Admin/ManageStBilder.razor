@page "/admin/st-bild/hantera"
@using Foto.WebServer.Dto
@using Foto.WebServer.Services
@using Microsoft.AspNetCore.Authorization
@inherits AuthorizedBasePage
@attribute [Authorize(Policy = "StBildAdministratorPolicy")]
@inject IStBildService StBildService

<PageTitle>Hantera ST-bilder</PageTitle>

<AppContent ContentMaxWidth="MaxWidth.Small" ContentClass="d-flex flex-column justify-content-center align-items-center mt-5">
    <Title>Hantera ST-bilder</Title>
    <Ingress>Hanterar ST-bilder</Ingress>
    <Container>
        @if (_stBilder.Any())
        {
            <MudTable Hover="true" Items="@_stBilder">
                <HeaderContent>
                    <MudTh>Bild</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Redigera</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Bild">
                        <MudImage Src="@($"/api/images/image/{context.ImageReference}?thumb")"/>
                    </MudTd>
                    <MudTd DataLabel="Status">
                        <MudTooltip Placement="Placement.Bottom" Inline="true" Text="@GetTooltipForStatus(context)">
                            <MudIconButton Class="disable-hover" DisableElevation="true" DisableRipple="true" Icon="@GetIconForStatus(context)" Color="@GetColorForStatus(context)"/>
                        </MudTooltip>
                    </MudTd>
                    <MudTd DataLabel="Redigera">
                        <MudLink Href="@($"/admin/st-bild/edit/{context.Id}?isFromAcceptList=false")">Redigera</MudLink>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <AppAlert Severity="Severity.Info">
                Det finns inga ST-bilder att hantera!
            </AppAlert>
            <MudButton Class="align-self-center mt-4" Style="width: 300px" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnShowPackagedImages">Visa skickade bilder</MudButton>
        }
    </Container>
</AppContent>

@code {
    private List<StBildInfo> _stBilder = new();
    private bool UsePackagedImages { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PopulateStBilderList();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task PopulateStBilderList()
    {
        _stBilder = await StBildService.GetStBilder(UsePackagedImages);
        StateHasChanged();
    }

    private Task ShowPackagedImages()
    {
        UsePackagedImages = true;
        return PopulateStBilderList();
    }

    private Task OnShowPackagedImagesClicked(ChangeEventArgs e)
    {
        UsePackagedImages = Convert.ToBoolean(e.Value);
        return PopulateStBilderList();
    }

    private Task OnShowPackagedImages()
    {
        UsePackagedImages = true;
        return PopulateStBilderList();
    }

    public static string GetIconForStatus(StBildInfo stBildInfo)
    {
        return stBildInfo.IsAccepted ? Icons.Material.Filled.Check : Icons.Material.Filled.ImageSearch;
    }

    private static Color GetColorForStatus(StBildInfo stBildInfo)
    {
        return stBildInfo.IsAccepted ? Color.Success : Color.Inherit;
    }

    private static string GetTooltipForStatus(StBildInfo stBildInfo)
    {
        return stBildInfo.IsAccepted ? "Godkänd" : "Skall granskas";
    }

}