@page "/admin/users/list"
@layout MainLayout
@using Foto.WebServer.Dto
@using Foto.WebServer.Services
@using Microsoft.AspNetCore.Authorization
@inherits AuthorizedBasePage
@attribute [Authorize(Roles = "Admin")]
@inject IUserService UserService

<PageTitle>Lista användare</PageTitle>
<AppContent ContentMaxWidth="MaxWidth.Small">
    <Title>Lista användare</Title>
    <Ingress>Här visas alla användare i systemet. Medlemsinformation hanteras under menyn "Medlemmar"</Ingress>
    <Container>
        <MudTable Items="_users" Filter="new Func<UserInfo, bool>(FilterFunc)" Hover="true">
            <ToolBarContent>
                <MudTextField Immediate="true" @bind-Value="_searchString" Placeholder="Sök" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Användarnamn</MudTh>
                <MudTh>Åtgärd</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Namn">
                    <MudText>@context.Username</MudText>
                </MudTd>
                <MudTd DataLabel="Bild">
                    <MudButton Href="@GetUserEditLink(context.Username)" Variant="Variant.Text" Color="Color.Primary">Redigera</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager RowsPerPageString="Visa:" PageSizeOptions="new[] { 10, 25, 50, 100, int.MaxValue }" HorizontalAlignment="HorizontalAlignment.Left" HidePageNumber="true" HidePagination="false" HideRowsPerPage="false"/>
            </PagerContent>
        </MudTable>
    </Container>
</AppContent>

@if (_responseHandler.HasAlert)
{
    <AppAlert Severity="Severity.Error">@_responseHandler.Message</AppAlert>
}

@code {

    [Parameter]
    public string[] SocialProviders { get; set; } = Array.Empty<string>();

    private readonly List<UserInfo> _users = new();
    private readonly ResponseHandler _responseHandler = new();
    private string _searchString = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await UserService.GetAllUsers();
            var users = _responseHandler.CheckResponse(result);
            if (users is not null)
            {
                foreach (var user in users)
                {
                    _users.Add(new UserInfo { Username = user.UserName });
                }
                StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    static string GetUserEditLink(string username)
    {
        return $"/admin/users/edit/{username}";
    }

    private bool FilterFunc(UserInfo element)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        return element.Username?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false;
    }

}