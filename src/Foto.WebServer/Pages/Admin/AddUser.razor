@page "/admin/users/precreate"
@layout MainLayout
@using FluentValidation
@using Foto.WebServer.Services
@using Microsoft.AspNetCore.Authorization
@using Severity = MudBlazor.Severity
@inherits AuthorizedBasePage
@attribute [Authorize(Roles = "Admin")]
@inject IUserService UserService

<PageTitle>Lägg till användare</PageTitle>
<AppContent ContentMaxWidth="MaxWidth.Small">
    <Title>Lägg till användare</Title>
    <Ingress>Lägg till nya användare som inte är medlemmar men ska ha tillgång till tjänsten</Ingress>
    <Container>
        <AppForm @bind-Disabled="@_disabled" @ref="_form" Model="_model" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
            <Form>
                <AppTextField @bind-Value="@_model.Email"
                              For="@(() => _model.Email)"
                              Label="E-post"/>
                <AppTextField @bind-Value="@_model.ConfirmEmail"
                              For="@(() => _model.ConfirmEmail)"
                              Label="Bekräfta e-post"/>
            </Form>
            <Actions>
                <AppButton StartIcon="@Icons.Material.Filled.Save" OnClick="HandleValidSubmit" Color="Color.Primary"
                           Disabled="@(!IsValid())" Class="mr-auto">
                    Lägg till
                </AppButton>
            </Actions>
        </AppForm>
    </Container>
</AppContent>


@if (_responseHandler.HasAlert)
{
    <AppAlert Severity="Severity.Error">@_responseHandler.Message</AppAlert>
}

@code {
    private PreCreateUserModel _model = new();
    private readonly ResponseHandler _responseHandler = new();
    private readonly LoginOrCreateUserModelValidator _validator = new();
    AppForm? _form;
    private bool _disabled;

    public bool IsValid()
    {
        return _validator.Validate(_model).IsValid && !_disabled;
    }

    private async Task<bool> IsFormValid()
    {
        if (_form is null)
            return false;
        await _form.Validate();
        return _form.IsValid;
    }

    private async Task HandleValidSubmit()
    {
        if (!await IsFormValid()) return;
        try
        {
            _disabled = true;
            var user = _responseHandler.CheckResponse(await UserService.PreCreateUserAsync(_model.Email));
            if (user is not null)
            {
    // We succeeded in creating a user, so we can clear the form and allow create a new one
                _model = new PreCreateUserModel();
            }
            StateHasChanged();
        }
        finally
        {
            _disabled = false;
        }
    }

    public class PreCreateUserModel
    {
        public string? Email { get; set; }
        public string? ConfirmEmail { get; set; }
    }

    public class LoginOrCreateUserModelValidator : ValidatorBase<PreCreateUserModel>
    {
        public LoginOrCreateUserModelValidator()
        {
            RuleFor(x => x.Email)
                .NotEmpty()
                .WithMessage("E-post måste anges.")
                .EmailAddress()
                .WithMessage("Ange en giltig e-postadress.");

            RuleFor(x => x.ConfirmEmail)
                .Equal(x => x.Email)
                .WithMessage("E-postadresserna måste matcha.");
        }
    }

}