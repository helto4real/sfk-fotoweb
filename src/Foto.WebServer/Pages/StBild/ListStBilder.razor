@page "/st-bild/list"
@using Foto.WebServer.Dto
@using Foto.WebServer.Services
@inherits AuthorizedBasePage
@inject IStBildService StBildService

<PageTitle>Visa ST-bilder</PageTitle>

<AppContent>
    <Title>Visa ST-bilder</Title>
    <Ingress>Här visas dina uppladdade ST-bilder.</Ingress>
    <Container>
        @if (_stBilder.Any())
        {
            <MudGrid Class="mt-4" Spacing="3" Justify="Justify.Center">
                @foreach (var stBild in _stBilder)
                {
                    <MudItem Class="d-flex align-center justify-center mud-width-full" lg="3" md="5" sm="6" xs="12">
                        <StImageCard StBild="@stBild"/>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <AppAlert Severity="Severity.Warning" Variant="Variant.Text">
                <p >
                    Inga ST bilder uppladdade att visa. Ladda upp en bild genom att klicka på "Ladda upp ST-bild" i menyn.
                </p>
            </AppAlert>
        }

    </Container>
</AppContent>

@code {
    private List<StBildInfo> _stBilder = new();
    private bool ShowPackagedImages { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PopulateStBilderList();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task PopulateStBilderList()
    {
        _stBilder = await StBildService.GetStBilderForCurrentUser(ShowPackagedImages);
        StateHasChanged();
    }

    private Task OnShowPackagedImagesChanged(ChangeEventArgs e)
    {
        ShowPackagedImages = Convert.ToBoolean(e.Value);
        return PopulateStBilderList();
    }

    private string GetEditLink(Guid imageId)
    {
        return $"/st-bild/edit/{imageId}";
    }

    private string GetImageStatus(StBildInfo stBild)
    {
        if (stBild.IsUsed) return "Skickad";
        return stBild.IsAccepted ? "Godkänd" : "Hanteras";
    }

}