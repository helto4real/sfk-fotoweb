@page "/admin/st-bild/paketera"
@inherits AuthorizedBasePage
@attribute [Authorize(Policy = "StBildAdministratorPolicy")]
@inject IStBildService StBildService
@inject INotificationService<int> PackageNotifications
@inject AppSnackBar AppSnackBar
@using Foto.WebServer.Dto
@using Foto.WebServer.Services
@using Microsoft.AspNetCore.Authorization
@implements IAsyncDisposable

<PageTitle>Paketera ST-bilder</PageTitle>

<AppContent ContentMaxWidth="MaxWidth.Medium" ContentClass="d-flex flex-column justify-content-center align-items-center mt-5">
    <Title>Paketera ST-bilder</Title>
    <Ingress>Paketera godkända och ej paketerade bilder.</Ingress>
    <Container>
        @if (_stBilder.Any())
        {
            <MudButton Class="align-self-center" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.FolderZip" 
                       Disabled="@(!CanPackage)" Color="Color.Primary" OnClick="OnPackageStBilder">Paketera ST-bilder nedan</MudButton>
            <MudGrid Class="align-self-center mt-4" Spacing="3" Justify="Justify.Center">
                @foreach (var stBild in _stBilder)
                {
                    <MudItem Class="d-flex align-center justify-center mud-width-full" lg="3" md="5" sm="6" xs="12">
                        <StImageCard
                            MaxWidth="150"
                            Height="100"
                            HideActions="true"
                            StBild="@stBild"/>
                    </MudItem>
                }
            </MudGrid>
            @if (Progress > 0)
            {
                <MudProgressLinear Color="Color.Primary" Value="@Progress" Class="my-7"/>
            }
        }
        else
        {
            <AppAlert Severity="Severity.Info">
                <p >
                    Det finns inga godkända st-bilder att paketera.
                </p>
            </AppAlert>
        }

    </Container>
</AppContent>

@code {
    private List<StBildInfo> _stBilder = new();
    private bool CanPackage { get; set; }
    private int Progress { get; set; } = -1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _stBilder = await StBildService.GetApprovedNotPackagedStBilderAsync();
            if (_stBilder.Any())
            {
                CanPackage = true;
                await PackageNotifications.RegisterCallback(NotificationEventHandler, "package_progress");
            }
            await InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task NotificationEventHandler(int progress)
    {
        if (progress == 100)
        {
            AppSnackBar.Alert("Paketering lyckades", Severity.Success);

            async void OnPackageReady(object? _)
            {
                Progress = -1;
                _stBilder = await StBildService.GetApprovedNotPackagedStBilderAsync();
                CanPackage = _stBilder.Any();
                await InvokeAsync(StateHasChanged);
            }

            _ = new Timer(OnPackageReady, null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
        }
        Progress = progress;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnPackageStBilder()
    {
        CanPackage = false;
        StateHasChanged();
        await StBildService.PackageStBilder(new GuidIds { Ids = _stBilder.Select(e => e.Id).ToList() });
    }

    public async ValueTask DisposeAsync()
    {
        await PackageNotifications.DisposeAsync();
    }

}