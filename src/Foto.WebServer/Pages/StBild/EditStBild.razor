@page "/st-bild/edit/{StbildId:guid}"
@using FluentValidation
@using Foto.WebServer.Dto
@using Foto.WebServer.Services
@using Severity = MudBlazor.Severity
@inherits AuthorizedBasePage
@inject IStBildService StBildService
@inject IAuthService AuthService
@inject AppSnackBar AppSnackBar

<!--suppress CssUnresolvedCustomProperty -->

<AppContent ContentMaxWidth="MaxWidth.Small">
    <Title>Redigera ST-bild</Title>
    <Ingress>Redigera din ST-bildinformation här.</Ingress>
    <Container>
        @if (_stBild is not null)
        {
            @if (_stBild.IsAccepted || _stBild.IsUsed)
            {
                @if (_stBild.IsUsed)
                {
                    <AppAlert Class="mb-3" Severity="Severity.Warning">Denna bild är skickad till ST och kan inte längre redigeras. </AppAlert>
                }
                else
                {
                    <AppAlert Class="mb-3" Severity="Severity.Warning">Denna bild är godkänd och kan inte längre redigeras.</AppAlert>
                }
            }

            <AppForm @bind-Disabled="@_isDisabled" @ref="_form" Model="@_stBild" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
                <Form>
                    <MudPaper Elevation="0" Outlined="true" Class="border-solid mt-4" Style="border-color: var(--mud-palette-lines-inputs);">
                        <div class="d-flex">
                            <MudImage></MudImage>
                        </div>
                    </MudPaper>
                    <AppTextField @bind-Value="@_stBild.Title"
                                  For="@(() => _stBild.Title)"
                                  ReadOnly="_isReadOnly"
                                  Label="Rubrik (Rubrikförslag, lämpligen tre, fyra ord)"/>

                    <AppTextField @bind-Value="@_stBild.Name"
                                  For="@(() => _stBild.Name)"
                                  ReadOnly="_isReadOnly"
                                  Label="Fotograf"/>

                    <AppTextField @bind-Value="@_stBild.Description"
                                  For="@(() => _stBild.Description)"
                                  ReadOnly="_isReadOnly"
                                  Lines="3"
                                  MaxLength="300"
                                  HelperText="Beskriv kort din bild, max 300 tecken."
                                  Label="Beskrivning av bilden"/>

                    <AppTextField @bind-Value="@_stBild.AboutThePhotographer"
                                  For="@(() => _stBild.AboutThePhotographer)"
                                  ReadOnly="_isReadOnly"
                                  Lines="3"
                                  MaxLength="300"
                                  HelperText="T.ex. ålder, bostadsort, favoritmotiv, kameramärke, favoritfotograf, hemsida"
                                  Label="Om dig"/>

                    <AppTextField @bind-Value="@_stBild.Location"
                                  For="@(() => _stBild.Location)"
                                  ReadOnly="_isReadOnly"
                                  HelperText="T.ex. plats, närmaste stad"
                                  Label="Vart bilden är tagen"/>

                    <AppTextField @bind-Value="@_stBild.Time"
                                  InputType="InputType.Date"
                                  For="@(() => _stBild.Time)"
                                  ReadOnly="_isReadOnly"
                                  Label="När bilden tagen:"/>

                </Form>
                <Actions>
                    <MudContainer Class="d-flex">
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" Disabled="@(!IsValid || _isDisabled || _isReadOnly)" Class="" OnClick="@(async () => await HandleValidSubmit())">Spara</MudButton>
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Surface" Disabled="@(_showProgressBar || _isDisabled)" Class="" OnClick="OnCancel">Avbryt</MudButton>
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Disabled="@(!IsValid || _isDisabled || _isReadOnly)" Class="ml-auto" OnClick="@(async () => await HandleDeleteStBild())">Radera</MudButton>
                    </MudContainer>
                </Actions>
            </AppForm>
        }

    </Container>
</AppContent>

@if (_responseHandler.HasAlert)
{
    <AppAlert Severity="Severity.Error">@_responseHandler.Message</AppAlert>
}

@code {

    private StBildInfo? _stBild;
    private bool _isReadOnly;
    private readonly ResponseHandler _responseHandler = new();
    private readonly UpdateUserModelValidator _validator = new();
    private bool _showProgressBar;
    private bool _isDisabled;
    private AppForm? _form;

    public bool IsValid => _form?.IsValid ?? false;

    [Parameter]
    public Guid StbildId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await StBildService.GetStBildAsync(StbildId);
            _stBild = _responseHandler.CheckResponse(response) ?? _stBild;

            if (_stBild is not null)
                _isReadOnly = _stBild.IsAccepted || _stBild.IsUsed;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandleDeleteStBild()
    {
        if (_stBild is not null)
        {
            var response = await StBildService.DeleteStBildAsync(_stBild.Id);
            if (_responseHandler.CheckResponse(response))
            {
                AppSnackBar.Alert("ST-bild borttagen.", Severity.Success);
                NavigationManager?.NavigateTo("/st-bild/list");
            }
        }
    }
    
    private async Task HandleValidSubmit()
    {
        if (_stBild is not null && _form is not null)
        {
            await _form.Validate();
            if (!_form.IsValid)
            {
                return;
            }

            try
            {
                _showProgressBar = true;
                await StBildService.UpdateStBildAsync(_stBild);
    // Navigate back to the StBild list page
                NavigationManager?.NavigateTo("/st-bild/list");
            }
            finally
            {
                _showProgressBar = false;
            }
        }
    }

    public class UpdateUserModelValidator : ValidatorBase<StBildInfo>
    {
        public UpdateUserModelValidator()
        {
            RuleFor(x => x.Description)
                .NotEmpty()
                .WithMessage("Beskrivning måste anges.")
                .MaximumLength(300)
                .WithMessage("Beskrivningen får max vara 300 tecken");
            RuleFor(x => x.Name)
                .NotEmpty()
                .WithMessage("Namn på fotograf måste anges.");
            RuleFor(x => x.Title)
                .NotEmpty()
                .WithMessage("Rubrik måste anges.");
            RuleFor(x => x.Location)
                .NotEmpty()
                .WithMessage("Plats måste anges.");
            RuleFor(x => x.AboutThePhotographer)
                .NotEmpty()
                .WithMessage("Om fotografen måste anges.");
            RuleFor(x => x.Time)
                .LessThanOrEqualTo(e => DateTime.Now.AddDays(1))
                .WithMessage("Tidpunkt kan inte vara framåt i tiden");
        }
    }

    private void OnCancel()
    {
        NavigationManager?.NavigateTo("/st-bild/list");
    }


}