@page "/password-reset"
@using Foto.WebServer.Services
@using Blazored.FluentValidation
@using FluentValidation
@using global::Shared.Validation
@inherits BasePage
@inject IUserService UserService

<div class="container">
    <div class="row  g-3 mb-5 justify-content-center align-items-center">
        <div class="col col-8" style="max-width: 550px;">
            <h2>Återställ ditt lösenord</h2>

        </div>
    </div>
    <div class="row g-3 mb-5 justify-content-center align-items-center">
        @if (!(_showLinkError || _passwordChangedSuccess))
        {
            <div class="col col-4">
                <CvEditForm id="uploadForm" Model="_model" class="form" OnValidSubmit="@HandleValidSubmit" Context="NewContext">
                    <FluentValidationValidator @ref="_fluentValidationValidator"/>
                    <div class="form-group mt-1">
                        <label for="new-password" class="form-label">Nytt lösenord:</label>
                        <InputText id="new-password" type="password" class="form-control app-input-wide" @bind-Value="_model.NewPassword"/>
                        <ValidationMessage class="text-danger" For="@(() => _model.NewPassword)"/>
                    </div>
                    <div class="form-group mt-1">
                        <label for="confirmPassword">Bekräfta lösenord</label>
                        <InputText id="confirmPassword" type="password" class="form-control app-input-wide" @bind-Value="_model.ConfirmPassword"/>
                        <ValidationMessage class="text-danger" For="@(() => _model.ConfirmPassword)"/>
                    </div>

                    <div class="d-flex justify-content-between align-items-center mt-4 app-input-wide">
                        @if (CanSubmit)
                        {
                            <button type="submit" class="btn btn-primary">Ändra lösenord</button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-primary" disabled>Ändra lösenord</button>
                        }
                        <button type="button" class="btn btn-secondary" @onclick="OnCancel">Avbryt</button>
                    </div>
                </CvEditForm>
            </div>
        }
        else
        {
            @if (_passwordChangedSuccess)
            {
                <div class="col col-5">
                    <div class="mb-2">Skapa nytt lösenord lyckades!</div>
                    <div >
                        <button type="button" class="btn btn-primary" @onclick="@(() => NavigationManager?.NavigateTo("/login", true))">Tillbaka till inloggning</button>
                    </div>
                </div>
            }
            else
            {
                <div class="col col-5">
                    <span>Felaktig länk. Klicka på rätt länk i ditt e-postmeddelande du fått från systemet eller begär ett nytt!</span>
                </div>
            }
        }
    </div>
</div>

@if (_responseHandler.HasAlert)
{
    <div class="alert alert-danger">@_responseHandler.Message</div>
}

@code {
    private readonly ResponseHandler _responseHandler = new();
    private ResetPasswordModel _model = new();
    FluentValidationValidator? _fluentValidationValidator;
    private bool _showLinkError;
    private bool _passwordChangedSuccess = true;

    private bool CanSubmit => _fluentValidationValidator?.Validate() ?? false;

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Token) || string.IsNullOrEmpty(Email))
        {
            _showLinkError = true;
            StateHasChanged();
        }
        base.OnInitialized();
    }

    private void OnCancel()
    {
        NavigationManager?.NavigateTo("/login");
    }

    [SupplyParameterFromQuery(Name = "token")]
    public string? Token { get; set; }

    [SupplyParameterFromQuery(Name = "email")]
    public string? Email { get; set; }

    public class ResetPasswordModel
    {
        public string NewPassword { get; set; } = "";
        public string ConfirmPassword { get; set; } = "";
    }

    public class ResetPasswordModelValidator : AbstractValidator<ResetPasswordModel>
    {
        public ResetPasswordModelValidator()
        {
            RuleFor(x => x.NewPassword).AppPassword();
            RuleFor(x => x.ConfirmPassword).Equal(x => x.NewPassword).WithMessage("Lösenorden matchar inte");
        }
    }

    private async Task HandleValidSubmit()
    {
        var result = await UserService.ResetPassword(Email!, _model.NewPassword, Uri.UnescapeDataString(Token!));
        if (result is not null)
        {
            _responseHandler.Message = "Misslyckades att ändra lösenord. Kan bero på att tiden för länken gått ut eller att du redan använt länken. Försök igen genom att begär på nytt!";
            _passwordChangedSuccess = false;
        }
        else
        {
            _passwordChangedSuccess = true;
        }
        StateHasChanged();
    }

}