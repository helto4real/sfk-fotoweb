@page "/user/edit"
@using Foto.WebServer.Services
@using Foto.WebServer.Dto
@inherits AuthorizedBasePage
@inject IUserService UserService;
@inject ISignInService SignInService;
@inject AppSnackBar AppSnackBar;

<PageTitle>Ändra kontouppgifter</PageTitle>

<AppContent ContentMaxWidth="MaxWidth.Small" ContentClass="d-flex flex-column justify-content-center align-items-center mt-5">
    <Title>Ändra kontouppgifter</Title>
    <Ingress>Ändra dina kontouppgifter i systemet. @DisplayPasswordText</Ingress>
    <Container>
        <AppForm @ref="_form" Model="_loginInfo" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
            <Form>
                <MudField Label="Nuvarande användarnamn">@_loginInfo.CurrentUserName</MudField>
                <MudField Label="Nuvarande e-post">@_loginInfo.CurrentEmail</MudField>
                
                @if (!_isExternal)
                {   
                    <AppTextField 
                        Label="Nuvarande lösenord" 
                        For="@(() => _loginInfo.CurrentPassword)" 
                        @bind-Value="_loginInfo.CurrentPassword"/>
                    
                    <AppTextField 
                        Label="Nytt lösenord" 
                        For="@(() => _loginInfo.NewPassword)" 
                        @bind-Value="_loginInfo.NewPassword"/>
                   
                    <AppTextField 
                        Label="Bekräfta lösenord" 
                        For="@(() => _loginInfo.ConfirmPassword)" 
                        @bind-Value="_loginInfo.ConfirmPassword"/>                
                }
                    
                <AppTextField 
                    Label="Ny e-post" 
                    For="@(() => _loginInfo.NewEmail)" 
                    @bind-Value="_loginInfo.NewEmail"/>                
                
                <AppTextField 
                    Label="Bekräfta ny e-post" 
                    For="@(() => _loginInfo.ConfirmNewEmail)" 
                    @bind-Value="_loginInfo.ConfirmNewEmail"/>
                
            </Form>
            <Actions>
                <MudButton StartIcon="@Icons.Material.Filled.Save" OnClick="HandleValidSubmit" Variant="Variant.Text" Color="Color.Primary" 
                                           Disabled="@(!IsValid())" >Spara</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Cancel" OnClick="OnCancel" Variant="Variant.Text" Color="Color.Surface" 
                                            Class="mr-auto">Avbryt</MudButton>
            </Actions>
        </AppForm>
    </Container>
</AppContent>

@if (_showEmailVerification)
{
    <AppAlert Class="mt-3" Severity="Severity.Warning">Du har ändrat e-postadress. Du behöver konfirmera den genom att klicka på länken du får i din e-post!</AppAlert>
}
@if (_responseHandler.HasAlert)
{
    <AppAlert Class="mt-3" Severity="Severity.Error">@_responseHandler.Message</AppAlert>
}

@code {
    private readonly ResponseHandler _responseHandler = new();
    private UpdateLoginInfo _loginInfo = new();
    private UserInfo? _user;
    private bool _isExternal;
    private bool _showEmailVerification;
    private readonly UpdateLoginInfoValidator _validator = new();
    private AppForm? _form;
    
    public bool IsValid()
    {
        if (string.IsNullOrWhiteSpace(_loginInfo.NewEmail) &&
            string.IsNullOrWhiteSpace(_loginInfo.NewPassword))
            return false;
        return _validator.Validate(_loginInfo).IsValid;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await UserService.GetCurrentUserAsync();
            _user = _responseHandler.CheckResponse(response);

            if (_user is not null)
            {
                _loginInfo = new UpdateLoginInfo
                {
                    CurrentUserName = _user.Username,
                    CurrentEmail = _user.Email
                };
            }
            _isExternal = await SignInService.IsCurrentUserExternalAsync();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandleValidSubmit()
    {
        _ = _form ?? throw new NullReferenceException("Form is null!");
        
        await _form.Validate();
        if (!_form.IsValid)
            return;
        
        var response = await UserService.ChangeLoginInfoAsync(_loginInfo);

        if (_responseHandler.CheckResponse(response))
        {
            if (_loginInfo.NewEmail != _loginInfo.CurrentEmail)
            {
                _showEmailVerification = true;
            }
            AppSnackBar.Alert("Dina kontouppgifter har ändrats.", Severity.Success);
        }
    }

    private void OnCancel()
    {
        NavigationManager?.NavigateTo("/");
    }

    private string DisplayPasswordText => !_isExternal ? "Du kan också ändra ditt lösenord." : string.Empty;

}