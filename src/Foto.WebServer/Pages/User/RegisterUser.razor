@page "/register"
@using FluentValidation
@using global::Shared.Validation
@using Foto.WebServer.Authentication
@using Foto.WebServer.Services
@using Foto.WebServer.Dto
@using Severity = MudBlazor.Severity
@inherits BasePage
@layout MainLayout
@inject ExternalProviders ExternalProviders
@inject IAuthService AuthService

<PageTitle>Registrera användare</PageTitle>

<AppContent ContentMaxWidth="MaxWidth.Small" ContentClass="d-flex flex-column justify-content-center align-items-center mt-5">
    <Title>Registrera användare</Title>
    <Ingress>
        Registrera dig genom att ange din e-post och nytt lösen. Administratören måste ha registrerat din e-post för att
        du skall kunna registrera dig som användare. Om din e-post är knyten till ett google konto kan du registrera dig genom att trycka på
        google knappen nedan. Då behöver du bara ange Google kontot när du loggar in i framtiden. Vill du byta din e-post till ditt Google konto,
        kontakta administratören.
    </Ingress>
    <Container>
        <AppForm @bind-Disabled="@_disabled" @ref="_form" Model="_model" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
            <Form>
                <AppTextField
                    Label="Användarnamn"
                    For="@(() => _model.UserName)"
                    @bind-Value="_model.UserName"/>

                <AppTextField
                    Label="Lösenord"
                    For="@(() => _model.Password)"
                    @bind-Value="_model.Password"/>

                <AppTextField
                    Label="Bekräfta lösenord"
                    For="@(() => _model.ConfirmPassword)"
                    @bind-Value="_model.ConfirmPassword"/>


            </Form>
            <Actions>
                <MudButton StartIcon="@Icons.Material.Filled.Person" OnClick="CreateUser" Variant="Variant.Text" Color="Color.Primary"
                           Disabled="@(!IsValid())">
                    Skapa användare
                </MudButton>
            </Actions>
        </AppForm>
        <MudText Align="Align.Center" Typo="Typo.body1" Class="mt-6">
            Skapa användare med ditt Google konto
        </MudText>
        <MudContainer Class="d-flex justify-center">
            <MudTooltip Class="mt-2" Text="Logga in med Google">
                <MudIconButton Class="mt-3 mx-auto" Href="@($"/api/auth/login/Google?token={EscapedToken}")" Icon="@Icons.Custom.Brands.Google" Variant="Variant.Outlined" Color="Color.Primary" aria-label="github"></MudIconButton>
            </MudTooltip>
        </MudContainer>
    </Container>
</AppContent>

@if (_responseHandler.HasAlert)
{
    <AppAlert Severity="Severity.Error">@_responseHandler.Message</AppAlert>
}

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string Token { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery(Name = "success")]
    public string? Success { get; set; } = string.Empty;

    private bool IsFail => !string.IsNullOrEmpty(Success);

    private bool HasToken => !string.IsNullOrEmpty(Token);
    private string EscapedToken => string.IsNullOrEmpty(Token) ? string.Empty : Uri.EscapeDataString(Token);

    private readonly ResponseHandler _responseHandler = new();

    private readonly RegisterModel _model = new();

    private AppForm? _form;
    private readonly RegisterModelValidator _validator = new();

    private bool IsValid()
    {
        return _validator.Validate(_model).IsValid && !_disabled;
    }

    private bool _disabled;

    protected override void OnInitialized()
    {
        if (IsFail)
        {
            _responseHandler.Message = "Tyvärr så verkar inte ditt Googlekonto vara registrerat i systemet. Kontakta administratören för att få hjälp.";
        }
        base.OnInitialized();
    }

    async Task CreateUser()
    {
        _ = _form ?? throw new NullReferenceException("Form is null");

        await _form.Validate();
        if (!_form.IsValid)
            return;

        if (!HasToken) return;

        var unEscapedToken = Uri.UnescapeDataString(Token);

        try
        {
            _disabled = true;
            var (registeredUser, errorRegisteredUser) = await AuthService.RegisterUserAsync(new NewUserInfo
            {
                Email = _model.UserName!,
                UserName = _model.UserName!,
                Password = _model.Password!,
                UrlToken = unEscapedToken
            });
            if (registeredUser is not null)
            {
                NavigationManager?.NavigateTo("/login", true);
            }
            else
            {
                if (errorRegisteredUser!.Detail.Contains("not pre-registered"))
                {
                    _responseHandler.Message = "Tyvärr så verkar inte din epostadress vara registrerat i systemet. Kontakta administratören för att få hjälp.";
                }
                else
                {
                    _responseHandler.CheckResponse((registeredUser, errorRegisteredUser));
                }
                StateHasChanged();
            }
        }
        finally
        {
            _disabled = false;
        }
    }

    public record RegisterModel
    {
        public string? UserName { get; set; } = string.Empty;
        public string? Password { get; set; } = string.Empty;
        public string? ConfirmPassword { get; set; }
    }

    public class RegisterModelValidator : ValidatorBase<RegisterModel>
    {
        public RegisterModelValidator()
        {
            RuleFor(x => x.UserName)
                .NotEmpty()
                .EmailAddress()
                .WithMessage("Du måste ange en användare med en giltig e-postadress.");
            RuleFor(x => x.Password)
                .AppPassword();
            RuleFor(x => x.ConfirmPassword)
                .NotEmpty()
                .WithMessage("Du måste ange lösenordet två gånger.")
                .Equal(x => x.Password)
                .WithMessage("Lösenorden måste vara lika.");
        }
    }

}